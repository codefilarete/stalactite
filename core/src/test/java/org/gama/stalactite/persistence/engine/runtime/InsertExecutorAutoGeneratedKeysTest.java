package org.gama.stalactite.persistence.engine.runtime;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.gama.lang.Retryer;
import org.gama.lang.collection.Arrays;
import org.gama.lang.collection.Iterables;
import org.gama.lang.trace.ModifiableInt;
import org.gama.stalactite.persistence.engine.DDLDeployer;
import org.gama.stalactite.persistence.id.manager.JDBCGeneratedKeysIdentifierManager;
import org.gama.stalactite.persistence.mapping.ClassMappingStrategy;
import org.gama.stalactite.persistence.mapping.SinglePropertyIdAccessor;
import org.gama.stalactite.persistence.sql.HSQLDBDialect;
import org.gama.stalactite.persistence.sql.IConnectionConfiguration.ConnectionConfigurationSupport;
import org.gama.stalactite.persistence.sql.MySQLDialect;
import org.gama.stalactite.persistence.sql.ddl.DDLTableGenerator;
import org.gama.stalactite.persistence.sql.dml.DMLGenerator;
import org.gama.stalactite.persistence.structure.Column;
import org.gama.stalactite.persistence.structure.Table;
import org.gama.stalactite.sql.binder.DefaultResultSetReaders;
import org.gama.stalactite.sql.dml.GeneratedKeysReader;
import org.gama.stalactite.sql.dml.SQLExecutionException;
import org.gama.stalactite.sql.test.HSQLDBInMemoryDataSource;
import org.gama.stalactite.sql.test.MariaDBEmbeddableDataSource;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * @author Guillaume Mary
 */
public class InsertExecutorAutoGeneratedKeysTest extends AbstractDMLExecutorTest {
	
	protected static class AutoGeneratedKeysDataSet extends DataSet {
		
		protected final ModifiableInt getGeneratedKeysCallCount;
		
		protected final int expectedGeneratedKeyCallCount;
		
		protected AutoGeneratedKeysDataSet(int expectedGeneratedKeyCallCount) throws SQLException {
			super();
			this.getGeneratedKeysCallCount = new ModifiableInt();
			this.expectedGeneratedKeyCallCount = expectedGeneratedKeyCallCount;
		}
		
		@Override
		protected PersistenceConfigurationBuilder newPersistenceConfigurationBuilder() {
			return new PersistenceConfigurationBuilder<Toto, Integer, Table>()
					.withTableAndClass("Toto", Toto.class, (tableAndClass, primaryKeyField) -> {
						Set<Column<? extends Table, Object>> primaryKeyColumns = tableAndClass.targetTable.getPrimaryKey().getColumns();
						Column<? extends Table, Object> primaryKeyColumn = Iterables.first(primaryKeyColumns);
						primaryKeyColumn.setAutoGenerated(true);
						
						String primaryColumnName = primaryKeyColumn.getName();
						return new ClassMappingStrategy<Toto, Integer, Table>(
								tableAndClass.mappedClass,
								tableAndClass.targetTable,
								(Map) tableAndClass.persistentFieldHarverster.getFieldToColumn(),
								primaryKeyField,
								new JDBCGeneratedKeysIdentifierManager<>(
										new SinglePropertyIdAccessor<>(primaryKeyField),
										new GeneratedKeysReaderAsInt(primaryColumnName) {
											@Override
											protected Integer readKey(ResultSet rs) throws SQLException {
												getGeneratedKeysCallCount.increment();
												return super.readKey(rs);
											}
										},
										Integer.class)
						);
					})
					.withPrimaryKeyFieldName("a");
		}
	}
	
	
	public static Object[][] dataSources() throws SQLException {
		AutoGeneratedKeysDataSet dataSet1 = new AutoGeneratedKeysDataSet(4);
		AutoGeneratedKeysDataSet dataSet2 = new AutoGeneratedKeysDataSet(4);
		return new Object[][] {
				{ dataSet1, new HSQLDBInMemoryDataSource(), new HSQLDBDialect().getDdlTableGenerator() },
				{ dataSet2, new MariaDBEmbeddableDataSource(3406), new MySQLDialect().getDdlTableGenerator() },
		};
	}
	
	@ParameterizedTest
	@MethodSource("dataSources")
	public void testInsert_generated_pk_real_life(AutoGeneratedKeysDataSet dataSet, DataSource dataSource, DDLTableGenerator ddlTableGenerator) throws SQLException {
		dataSet.transactionManager.setDataSource(dataSource);
		
		DDLDeployer ddlDeployer = new DDLDeployer(dataSet.dialect.getJavaTypeToSqlTypeMapping(), dataSet.transactionManager) {
			@Override
			protected Connection getCurrentConnection() {
				try {
					return dataSource.getConnection();
				} catch (SQLException e) {
					throw new SQLExecutionException(e);
				}
			}
		};
		ddlDeployer.getDdlGenerator().setDdlTableGenerator(ddlTableGenerator);
		ddlDeployer.getDdlGenerator().setTables(Arrays.asSet(dataSet.persistenceConfiguration.targetTable));
		ddlDeployer.deployDDL();
		
		DMLGenerator dmlGenerator = new DMLGenerator(dataSet.dialect.getColumnBinderRegistry(), new DMLGenerator.CaseSensitiveSorter());
		InsertExecutor<Toto, Integer, Table> testInstance = new InsertExecutor<>(dataSet.persistenceConfiguration.classMappingStrategy,
				new ConnectionConfigurationSupport(dataSet.transactionManager, 3), dmlGenerator, Retryer.NO_RETRY, 3);
		List<Toto> totoList = Arrays.asList(new Toto(17, 23), new Toto(29, 31), new Toto(37, 41), new Toto(43, 53));
		testInstance.insert(totoList);
		
		assertEquals(dataSet.expectedGeneratedKeyCallCount, dataSet.getGeneratedKeysCallCount.getValue());	// if it fails with 0 it means that statement.getGeneratedKeys() returned an empty ResultSet
		// Verfy that database generated keys were set to Java instances
		assertEquals(Arrays.asList(1, 2, 3, 4), Iterables.collectToList(totoList, toto -> toto.a));
	}
	
	public static class GeneratedKeysReaderAsInt extends GeneratedKeysReader<Integer> {
		public GeneratedKeysReaderAsInt(String keyName) {
			super(keyName, DefaultResultSetReaders.INTEGER_PRIMITIVE_READER);
		}
	}
	
}