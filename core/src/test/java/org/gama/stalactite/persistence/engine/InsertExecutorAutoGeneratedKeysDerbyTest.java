package org.gama.stalactite.persistence.engine;

import javax.sql.DataSource;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;
import java.util.Set;

import org.gama.lang.collection.Iterables;
import org.gama.sql.test.DerbyInMemoryDataSource;
import org.gama.stalactite.persistence.id.manager.JDBCGeneratedKeysIdentifierManager;
import org.gama.stalactite.persistence.mapping.ClassMappingStrategy;
import org.gama.stalactite.persistence.mapping.SinglePropertyIdAccessor;
import org.gama.stalactite.persistence.sql.DerbyDialect.DerbyGeneratedKeysReader;
import org.gama.stalactite.persistence.sql.ddl.DDLTableGenerator;
import org.gama.stalactite.persistence.structure.Column;
import org.gama.stalactite.persistence.structure.Table;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

/**
 * Same as {@link InsertExecutorAutoGeneratedKeysTest} but dedicated to Derby because of its implementation of generated keys.
 * cf {@link AutoGeneratedKeysDerbyDataSet#newPersistenceConfigurationBuilder()}
 *
 * @author Guillaume Mary
 */
public class InsertExecutorAutoGeneratedKeysDerbyTest extends InsertExecutorAutoGeneratedKeysTest {
	
	protected static class AutoGeneratedKeysDerbyDataSet extends AutoGeneratedKeysDataSet {
		
		public AutoGeneratedKeysDerbyDataSet(int expectedGeneratedKeyCallCount) throws SQLException {
			super(expectedGeneratedKeyCallCount);
		}
		
		@Override
		protected PersistenceConfigurationBuilder newPersistenceConfigurationBuilder() {
			return new PersistenceConfigurationBuilder<Toto, Integer, Table>()
					.withTableAndClass("Toto", Toto.class, (tableAndClass, primaryKeyField) -> {
							Set<Column<? extends Table, Object>> primaryKeyColumns = tableAndClass.targetTable.getPrimaryKey().getColumns();
							Column<? extends Table, Object> primaryKeyColumn = Iterables.first(primaryKeyColumns);
							primaryKeyColumn.setAutoGenerated(true);
							
							// Derby doesn't name generated keys : column is only numbered
							DerbyGeneratedKeysReader derbyGeneratedKeysReader = new DerbyGeneratedKeysReader("1") {
								@Override
								protected Integer readKey(ResultSet rs) throws SQLException {
									getGeneratedKeysCallCount.increment();
									return super.readKey(rs);
								}
							};
							
							return new ClassMappingStrategy<Toto, Integer, Table>(
									tableAndClass.mappedClass,
									tableAndClass.targetTable,
									(Map) tableAndClass.persistentFieldHarverster.getFieldToColumn(),
									primaryKeyField,
									new JDBCGeneratedKeysIdentifierManager<>(
											new SinglePropertyIdAccessor<>(primaryKeyField),
											derbyGeneratedKeysReader,
											Integer.class)
							);
						
					})
					.withPrimaryKeyFieldName("a");
		}
	}
	
	public static Object[][] dataSources() throws SQLException {
		// Expected generated keys calls is 2 because Derby returns only highest value per batch and we have 2 batches (4 inserted instances per 3-sized blocs)
		// (see parent testInsert_generated_pk_real_life() method)
		AutoGeneratedKeysDerbyDataSet dataSet = new AutoGeneratedKeysDerbyDataSet(2);
		return new Object[][] {
				{ dataSet, new DerbyInMemoryDataSource(), new DDLTableGenerator(dataSet.dialect.getJavaTypeToSqlTypeMapping()) {
					
					@Override
					protected String getSqlType(Column column) {
						String sqlType = super.getSqlType(column);
						if (column.isAutoGenerated()) {
							sqlType += " GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1)";
						}
						return sqlType;
					}
				} },
		};
	}
	
	/**
	 * Overriden to force use of the declared data provider in this class, otherwise this test class is exactly the same as the parent one because
	 * the static data provider method is ignored (method hiding)
	 */
	@Override
	@ParameterizedTest
	@MethodSource("dataSources")
	public void testInsert_generated_pk_real_life(AutoGeneratedKeysDataSet dataSet, DataSource dataSource, DDLTableGenerator ddlTableGenerator)
			throws SQLException {
		super.testInsert_generated_pk_real_life(dataSet, dataSource, ddlTableGenerator);
	}
}