package org.gama.stalactite.persistence.sql;

import java.sql.SQLException;
import java.util.List;

import org.gama.lang.collection.Iterables;
import org.gama.stalactite.persistence.sql.ddl.DDLTableGenerator;
import org.gama.stalactite.persistence.sql.ddl.SqlTypeRegistry;
import org.gama.stalactite.persistence.structure.Column;
import org.gama.stalactite.sql.binder.DefaultParameterBinders;
import org.gama.stalactite.sql.binder.DerbyTypeMapping;
import org.gama.stalactite.sql.dml.GeneratedKeysReader;
import org.gama.stalactite.sql.dml.WriteOperation;

/**
 * @author Guillaume Mary
 */
public class DerbyDialect extends Dialect {

	public DerbyDialect() {
		super(new DerbyTypeMapping());
	}

	/**
	 * Overriden to return dedicated Derby generated keys reader because Derby as a special management
	 * <strong>Only supports Integer</strong>
	 */
	@Override
	public <I> GeneratedKeysReader<I> buildGeneratedKeysReader(String keyName, Class<I> columnType) {
		return (GeneratedKeysReader<I>) new DerbyGeneratedKeysReader();
	}

	@Override
	protected DDLTableGenerator newDdlTableGenerator() {
		return new DerbyTableGenerator(getSqlTypeRegistry());
	}
	
	public static class DerbyGeneratedKeysReader extends GeneratedKeysReader<Integer> {
		
		/**
		 * Constructor
		 */
		public DerbyGeneratedKeysReader() {
			// Derby doesn't support named column for generated key, we use "1" assuming this is used for autoincremented id
			super("1", DefaultParameterBinders.INTEGER_PRIMITIVE_BINDER);
		}
		
		/** Overriden to simulate generated keys for Derby because it only returns the highest generated key */
		@Override
		public List<Integer> read(WriteOperation writeOperation) throws SQLException {
			List<Integer> rows = super.read(writeOperation);
			// Derby only returns one row: the highest generated key
			int first = Iterables.first(rows);
			// we append the missing values in incrementing order, assuming that's a one by one increment
			for (int i = 0; i < writeOperation.getUpdatedRowCount(); i++) {
				rows.add(0, first - i);
			}
			return rows;
		}
	}
	
	public static class DerbyTableGenerator extends DDLTableGenerator {

		public DerbyTableGenerator(SqlTypeRegistry typeMapping) {
			super(typeMapping);
		}

		/**
		 * Overriden to take identity column into account : Derby script must be adapted 
		 * @param column
		 * @return
		 */
		@Override
		protected String getSqlType(Column column) {
			String sqlType = super.getSqlType(column);
			if (column.isAutoGenerated()) {
				sqlType += " GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1)";
			}
			return sqlType;
		}
	}
}
